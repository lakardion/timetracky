import { zodResolver } from "@hookform/resolvers/zod";
import { CreateTagInputs, createTagZod } from "common/validators";
import { Button } from "components/button";
import { FormValidationError } from "components/form";
import { Modal } from "components/modal";
import Head from "next/head";
import { FC, useState } from "react";
import { useForm } from "react-hook-form";
import { trpc } from "utils/trpc";
import { z } from "zod";

const TagEditCreateForm: FC<{ onFinish: () => void }> = ({ onFinish }) => {
  const {
    handleSubmit,
    register,
    formState: { errors },
  } = useForm<CreateTagInputs>({
    resolver: zodResolver(createTagZod),
  });
  const queryClient = trpc.useContext();

  const { isLoading, mutateAsync } = trpc.useMutation("timetracky.createTag", {
    onSuccess: () => {
      queryClient.invalidateQueries(["timetracky.tagsWithHourCount"]);
    },
  });

  const onSubmit = async (data: CreateTagInputs) => {
    const createdTag = await mutateAsync({ name: data.name });
    onFinish();
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="flex flex-col gap-2 p-4">
      <h1 className="text-3xl font-semibold">Create a tag</h1>
      <label htmlFor="name" className="font-medium">
        Name
      </label>
      <input
        {...register("name")}
        className="border border-solid border-gray-400 rounded-md px-2 py-1 text-black"
      />
      <FormValidationError errors={errors} fieldKey="name" />
      <div className="flex gap-3">
        <Button
          type="submit"
          className="flex-grow"
          isLoading={isLoading}
          disabled={isLoading}
        >
          Create
        </Button>
        <Button className="flex-grow" onClick={onFinish} disabled={isLoading}>
          Cancel
        </Button>
      </div>
    </form>
  );
};
const TagList = () => {
  const { data: tagsWithHour } = trpc.useQuery([
    "timetracky.tagsWithHourCount",
  ]);
  if (!tagsWithHour) return null;
  if (!tagsWithHour?.length) return <p>No tags added yet</p>;
  return (
    <>
      <ul className="flex flex-wrap gap-3">
        {tagsWithHour.map((t) => (
          <article
            className="border border-solid border-orange-600/20 shadow-sm py-2 px-4 rounded-l-full rounded-r-full bg-orange-200 "
            key={t.id}
          >
            <p>
              {t.name} ({t.hourCount})
            </p>
          </article>
        ))}
      </ul>
    </>
  );
};

const Tags = () => {
  const [isOpen, setIsOpen] = useState(false);
  const handleClose = () => {
    setIsOpen(false);
  };
  const handleOpen = () => {
    setIsOpen(true);
  };
  const handleSubmit = () => {};
  return (
    <>
      <Head>
        <title>Timetracky - Tags</title>
        <meta name="description" content="Generated by create-t3-app" />
      </Head>
      <section aria-label="actions" className="w-full flex justify-center">
        <Button onClick={handleOpen}>Add a tag</Button>
      </section>
      <section className="pt-2 flex flex-wrap gap-3 justify-center">
        <TagList />
      </section>
      {isOpen ? (
        <Modal onClose={handleClose}>
          <TagEditCreateForm onFinish={handleClose} />
        </Modal>
      ) : null}
    </>
  );
};

export default Tags;
