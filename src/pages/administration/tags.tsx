import { useAutoAnimate } from "@formkit/auto-animate/react";
import { zodResolver } from "@hookform/resolvers/zod";
import { CreateTagInputs, createTagZod } from "common/validators";
import { getAdministrationLayout } from "components/administration";
import { Button } from "components/button";
import { ConfirmForm } from "components/confirm-form";
import { FormValidationError } from "components/form";
import { Modal } from "components/modal";
import Head from "next/head";
import { NextPageWithLayout } from "pages/_app";
import { FC, useState } from "react";
import { useForm } from "react-hook-form";
import { MdDeleteOutline } from "react-icons/md";
import { trpc } from "utils/trpc";
import { z } from "zod";

const TagEditCreateForm: FC<{ onFinish: () => void }> = ({ onFinish }) => {
  const {
    handleSubmit,
    register,
    formState: { errors },
  } = useForm<CreateTagInputs>({
    resolver: zodResolver(createTagZod),
  });
  const queryClient = trpc.useContext();

  const { isLoading, mutateAsync } = trpc.useMutation("tags.create", {
    onSuccess: () => {
      queryClient.invalidateQueries(["tags.withHourCount"]);
    },
  });

  const onSubmit = async (data: CreateTagInputs) => {
    const createdTag = await mutateAsync({ name: data.name });
    onFinish();
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="flex flex-col gap-2 p-4">
      <h1 className="text-3xl font-semibold">Create a tag</h1>
      <label htmlFor="name" className="font-medium">
        Name
      </label>
      <input
        {...register("name")}
        className="border border-solid border-gray-400 rounded-md px-2 py-1 text-black"
      />
      <FormValidationError error={errors.name} />
      <div className="flex gap-3">
        <Button
          type="submit"
          className="flex-grow"
          isLoading={isLoading}
          disabled={isLoading}
        >
          Create
        </Button>
        <Button className="flex-grow" onClick={onFinish} disabled={isLoading}>
          Cancel
        </Button>
      </div>
    </form>
  );
};

const TagList: FC<{ onTagDelete: (tagId: string) => void }> = ({
  onTagDelete,
}) => {
  const { data: tagsWithHour } = trpc.useQuery(["tags.withHourCount"]);
  const createTagDeleteHandler = (tagId: string) => () => {
    onTagDelete(tagId);
  };
  const [hoveringId, setHoveringId] = useState("");
  const [parent] = useAutoAnimate<HTMLUListElement>();
  if (!tagsWithHour) return null;
  if (!tagsWithHour?.length)
    return <p className="text-base italic pt-3">No tags added yet</p>;
  const createHoverHandler = (id: string) => () => {
    setHoveringId(id);
  };
  const clearHover = () => {
    setHoveringId("");
  };

  return (
    <>
      <ul className="flex flex-wrap gap-3 pt-3" ref={parent}>
        {tagsWithHour.map((t) => (
          <li
            className="relative border border-solid border-orange-600/20 shadow-sm py-2 px-4 rounded-l-full rounded-r-full bg-orange-200 "
            key={t.id}
            onMouseEnter={createHoverHandler(t.id)}
            onMouseLeave={clearHover}
          >
            <p>
              {t.name} ({t.hourCount})
            </p>
            <button
              className={`${
                hoveringId === t.id ? "" : "hidden"
              } absolute bg-red-300 border-2 border-solid border-gray-400 rounded-full p-1 -top-3 -right-3`}
              onClick={createTagDeleteHandler(t.id)}
            >
              <MdDeleteOutline size={18} />
            </button>
          </li>
        ))}
      </ul>
    </>
  );
};

const Tags: NextPageWithLayout = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [currentTagId, setCurrentTagId] = useState("");
  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);

  const queryClient = trpc.useContext();
  const {
    isLoading: isDeleting,
    error: deleteError,
    mutateAsync: deleteTag,
  } = trpc.useMutation("tags.delete", {
    onSuccess: () => {
      queryClient.invalidateQueries(["tags.all"]);
      queryClient.invalidateQueries(["tags.withHourCount"]);
      queryClient.invalidateQueries(["hours.withTagAndProject"]);
    },
  });

  const handleClose = () => {
    setIsOpen(false);
  };
  const handleOpen = () => {
    setIsOpen(true);
  };
  const handleConfirmModalClose = () => {
    setIsConfirmModalOpen(false);
    setCurrentTagId("");
  };
  const handleOpenConfirmDelete = (tagId: string) => {
    setIsConfirmModalOpen(true);
    setCurrentTagId(tagId);
  };
  const handleConfirmDelete = async () => {
    await deleteTag({ tagId: currentTagId });
    handleConfirmModalClose();
  };

  return (
    <>
      <Head>
        <title>Timetracky - Tags</title>
        <meta name="description" content="Generated by create-t3-app" />
      </Head>
      <section aria-label="actions" className="w-full flex justify-center">
        <Button onClick={handleOpen}>Add a tag</Button>
      </section>
      <section className="pt-2 flex flex-wrap gap-3 justify-center">
        <TagList onTagDelete={handleOpenConfirmDelete} />
      </section>
      {isOpen ? (
        <Modal onBackdropClick={handleClose}>
          <TagEditCreateForm onFinish={handleClose} />
        </Modal>
      ) : null}
      {isConfirmModalOpen ? (
        <Modal onBackdropClick={handleConfirmModalClose}>
          <ConfirmForm
            body="Confirm delete tag"
            onCancel={handleConfirmModalClose}
            onConfirm={handleConfirmDelete}
            isConfirming={isDeleting}
            errorMessage={deleteError?.message}
          />
        </Modal>
      ) : null}
    </>
  );
};

Tags.getLayout = getAdministrationLayout;

export default Tags;
