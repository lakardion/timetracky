import { useAutoAnimate } from '@formkit/auto-animate/react';
import { zodResolver } from '@hookform/resolvers/zod';
import { CreateTagInputs, createTagZod } from 'common/validators';
import { getAdministrationLayout } from 'components/administration';
import { Button } from 'components/button';
import { ConfirmForm } from 'components/confirm-form';
import { FormValidationError } from 'components/form';
import { Modal } from 'components/modal';
import Head from 'next/head';
import { NextPageWithLayout } from 'pages/_app';
import { FC, useState } from 'react';
import { useForm } from 'react-hook-form';
import { MdDeleteOutline } from 'react-icons/md';
import { trpc } from 'utils/trpc';
import { z } from 'zod';

const TagEditCreateForm: FC<{ onFinish: () => void }> = ({ onFinish }) => {
  const {
    handleSubmit,
    register,
    formState: { errors },
  } = useForm<CreateTagInputs>({
    resolver: zodResolver(createTagZod),
  });
  const queryClient = trpc.useContext();

  const { isLoading, mutateAsync } = trpc.useMutation('tags.create', {
    onSuccess: () => {
      queryClient.invalidateQueries(['tags.withHourCount']);
    },
  });

  const onSubmit = async (data: CreateTagInputs) => {
    const createdTag = await mutateAsync({ name: data.name });

    onFinish();
  };

  return (
    <form className="flex flex-col gap-2 p-4" onSubmit={handleSubmit(onSubmit)}>
      <h1 className="text-3xl font-semibold">Create a tag</h1>
      <label className="font-medium" htmlFor="name">
        Name
      </label>
      <input {...register('name')} className="rounded-md border border-solid border-gray-400 px-2 py-1 text-black" />
      <FormValidationError error={errors.name} />
      <div className="flex gap-3">
        <Button className="flex-grow" disabled={isLoading} isLoading={isLoading} type="submit">
          Create
        </Button>
        <Button className="flex-grow" disabled={isLoading} onClick={onFinish}>
          Cancel
        </Button>
      </div>
    </form>
  );
};

const TagList: FC<{ onTagDelete: (tagId: string) => void }> = ({ onTagDelete }) => {
  const { data: tagsWithHour } = trpc.useQuery(['tags.withHourCount']);
  const createTagDeleteHandler = (tagId: string) => () => {
    onTagDelete(tagId);
  };
  const [hoveringId, setHoveringId] = useState('');
  const [parent] = useAutoAnimate<HTMLUListElement>();

  if (!tagsWithHour) return null;
  if (!tagsWithHour?.length) return <p className="pt-3 text-base italic">No tags added yet</p>;
  const createHoverHandler = (id: string) => () => {
    setHoveringId(id);
  };
  const clearHover = () => {
    setHoveringId('');
  };

  return (
    <>
      <ul ref={parent} className="flex flex-wrap gap-3 pt-3">
        {tagsWithHour.map((t) => (
          <li
            key={t.id}
            className="relative rounded-l-full rounded-r-full border border-solid border-orange-600/20 bg-orange-200 py-2 px-4 shadow-sm "
            onMouseEnter={createHoverHandler(t.id)}
            onMouseLeave={clearHover}
          >
            <p>
              {t.name} ({t.hourCount})
            </p>
            <button
              className={`${hoveringId === t.id ? '' : 'hidden'} absolute -top-3 -right-3 rounded-full border-2 border-solid border-gray-400 bg-red-300 p-1`}
              onClick={createTagDeleteHandler(t.id)}
            >
              <MdDeleteOutline size={18} />
            </button>
          </li>
        ))}
      </ul>
    </>
  );
};

const Tags: NextPageWithLayout = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [currentTagId, setCurrentTagId] = useState('');
  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);

  const queryClient = trpc.useContext();
  const {
    isLoading: isDeleting,
    error: deleteError,
    mutateAsync: deleteTag,
  } = trpc.useMutation('tags.delete', {
    onSuccess: () => {
      queryClient.invalidateQueries(['tags.all']);
      queryClient.invalidateQueries(['tags.withHourCount']);
      queryClient.invalidateQueries(['hours.withTagAndProject']);
    },
  });

  const handleClose = () => {
    setIsOpen(false);
  };
  const handleOpen = () => {
    setIsOpen(true);
  };
  const handleConfirmModalClose = () => {
    setIsConfirmModalOpen(false);
    setCurrentTagId('');
  };
  const handleOpenConfirmDelete = (tagId: string) => {
    setIsConfirmModalOpen(true);
    setCurrentTagId(tagId);
  };
  const handleConfirmDelete = async () => {
    await deleteTag({ tagId: currentTagId });
    handleConfirmModalClose();
  };

  return (
    <>
      <Head>
        <title>Timetracky - Tags</title>
        <meta content="Generated by create-t3-app" name="description" />
      </Head>
      <section aria-label="actions" className="flex w-full justify-center">
        <Button onClick={handleOpen}>Add a tag</Button>
      </section>
      <section className="flex flex-wrap justify-center gap-3 pt-2">
        <TagList onTagDelete={handleOpenConfirmDelete} />
      </section>
      {isOpen ? (
        <Modal onBackdropClick={handleClose}>
          <TagEditCreateForm onFinish={handleClose} />
        </Modal>
      ) : null}
      {isConfirmModalOpen ? (
        <Modal onBackdropClick={handleConfirmModalClose}>
          <ConfirmForm body="Confirm delete tag" errorMessage={deleteError?.message} isConfirming={isDeleting} onCancel={handleConfirmModalClose} onConfirm={handleConfirmDelete} />
        </Modal>
      ) : null}
    </>
  );
};

Tags.getLayout = getAdministrationLayout;

export default Tags;
